{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, AUTH_ERROR, USER_LOADED, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from \"../utils/setAuthToken\"; //load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Logout / clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/aht/Desktop/Dev-app-frontend/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","AUTH_ERROR","USER_LOADED","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport {setAlert} from './alert';\nimport {\n    REGISTER_SUCCESS, \n    REGISTER_FAIL, \n    AUTH_ERROR, \n    USER_LOADED,\n    LOGIN_FAIL,\n    LOGIN_SUCCESS,\n    LOGOUT,\n    CLEAR_PROFILE\n} from './types';\nimport setAuthToken from \"../utils/setAuthToken\";\n\n//load user\nexport const loadUser = () => async dispatch => { \n    if(localStorage.token){\n        setAuthToken(localStorage.token)\n    }\n\n    try{\n        const res = await axios.get('/auth');\n\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })\n    }\n    catch(err) {\n        dispatch({type: AUTH_ERROR});\n    }\n}\n\n//Register user\nexport const register = ({name, email, password}) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({name, email, password});\n    try{\n        const res = await axios.post('/users', body, config);\n        \n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(loadUser());\n    }\n    catch(err) {\n        const errors = err.response.data.errors;\n\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: REGISTER_FAIL \n        })\n    }\n};\n\n\n//Login user\nexport const login = ( email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({email, password});\n    try{\n        const res = await axios.post('/auth', body, config);\n        \n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(loadUser());\n    }\n    catch(err) {\n        const errors = err.response.data.errors;\n\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: LOGIN_FAIL \n        })\n    }\n};\n\n//Logout / clear Profile\n\nexport const logout = () => dispatch => {\n    dispatch({type: CLEAR_PROFILE});\n    dispatch({type: LOGOUT});\n};"]},"metadata":{},"sourceType":"module"}