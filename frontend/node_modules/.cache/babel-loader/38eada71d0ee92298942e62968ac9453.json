{"ast":null,"code":"import _toConsumableArray from\"/home/aht/Desktop/MERN/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/aht/Desktop/MERN/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_COMMENT,ADD_POST,DELETE_POST,GET_POST,GET_POSTS,POST_ERROR,REMOVE_COMMENT,UPDATE_LIKES}from'../actions/types';var initialState={posts:[],post:null,loading:true,error:{}};var post=function post(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case GET_POSTS:return _objectSpread(_objectSpread({},state),{},{posts:payload,loading:false});case GET_POST:return _objectSpread(_objectSpread({},state),{},{post:payload,loading:false});case ADD_POST:return _objectSpread(_objectSpread({},state),{},{posts:[payload].concat(_toConsumableArray(state.posts)),loading:false});case DELETE_POST:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.filter(function(post){return post._id!==payload;}),loading:false});case POST_ERROR:return _objectSpread(_objectSpread({},state),{},{error:payload,loading:false});case UPDATE_LIKES:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.map(function(post){return post._id===payload.id?_objectSpread(_objectSpread({},post),{},{likes:payload.likes}):post;}),loading:false});case ADD_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:payload}),loading:false});case REMOVE_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:state.post.comments.filter(function(comment){return comment._id!==payload;})}),loading:false});default:return state;}};export default post;","map":{"version":3,"sources":["/home/aht/Desktop/MERN/client/src/reducers/post.js"],"names":["ADD_COMMENT","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","REMOVE_COMMENT","UPDATE_LIKES","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":"+SAAA,OACIA,WADJ,CAEIC,QAFJ,CAGIC,WAHJ,CAIIC,QAJJ,CAKIC,SALJ,CAMIC,UANJ,CAOIC,cAPJ,CAQIC,YARJ,KASO,kBATP,CAWA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,EADU,CAEjBC,IAAI,CAAE,IAFW,CAGjBC,OAAO,CAAE,IAHQ,CAIjBC,KAAK,CAAE,EAJU,CAArB,CAOA,GAAMF,CAAAA,IAAI,CAAI,QAARA,CAAAA,IAAQ,EAAgC,IAA/BG,CAAAA,KAA+B,2DAAzBL,YAAyB,IAAXM,CAAAA,MAAW,8CACnCC,CAAAA,IADmC,CAClBD,MADkB,CACnCC,IADmC,CAC7BC,OAD6B,CAClBF,MADkB,CAC7BE,OAD6B,CAG1C,OAAQD,IAAR,EACI,IAAKX,CAAAA,SAAL,CACI,sCACOS,KADP,MAEIJ,KAAK,CAAEO,OAFX,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKR,CAAAA,QAAL,CACI,sCACOU,KADP,MAEIH,IAAI,CAAEM,OAFV,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKV,CAAAA,QAAL,CACI,sCACOY,KADP,MAEIJ,KAAK,EAAGO,OAAH,4BAAeH,KAAK,CAACJ,KAArB,EAFT,CAGIE,OAAO,CAAE,KAHb,GAKJ,IAAKT,CAAAA,WAAL,CACI,sCACOW,KADP,MAEIJ,KAAK,CAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmB,SAAAP,IAAI,QAAIA,CAAAA,IAAI,CAACQ,GAAL,GAAaF,OAAjB,EAAvB,CAFX,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKN,CAAAA,UAAL,CACI,sCACOQ,KADP,MAEID,KAAK,CAAEI,OAFX,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKJ,CAAAA,YAAL,CACI,sCACOM,KADP,MAEIJ,KAAK,CAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgB,SAAAT,IAAI,QAAIA,CAAAA,IAAI,CAACQ,GAAL,GAAaF,OAAO,CAACI,EAArB,gCACxBV,IADwB,MAE3BW,KAAK,CAAEL,OAAO,CAACK,KAFY,GAEFX,IAFF,EAApB,CAFX,CAMIC,OAAO,CAAE,KANb,GAQJ,IAAKX,CAAAA,WAAL,CACI,sCACOa,KADP,MAEIH,IAAI,gCAAMG,KAAK,CAACH,IAAZ,MAAkBY,QAAQ,CAAEN,OAA5B,EAFR,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKL,CAAAA,cAAL,CACI,sCACOO,KADP,MAEIH,IAAI,gCACGG,KAAK,CAACH,IADT,MAEAY,QAAQ,CAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CACN,SAAAM,OAAO,QAAIA,CAAAA,OAAO,CAACL,GAAR,GAAgBF,OAApB,EADD,CAFV,EAFR,CAQIL,OAAO,CAAE,KARb,GAUJ,QACI,MAAOE,CAAAA,KAAP,CA1DR,CA4DH,CA/DD,CAiEA,cAAeH,CAAAA,IAAf","sourcesContent":["import {\n    ADD_COMMENT,\n    ADD_POST,\n    DELETE_POST,\n    GET_POST,\n    GET_POSTS,\n    POST_ERROR,\n    REMOVE_COMMENT,\n    UPDATE_LIKES\n} from '../actions/types';\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n};\n\nconst post =  (state=initialState, action) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false\n            };\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false  \n            }\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [payload, ...state.posts],\n                loading: false\n            }\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n        case POST_ERROR:\n            return {\n                ...state,\n                error: payload,\n                loading: false\n            }\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload.id ? {\n                    ...post,\n                    likes: payload.likes } : post\n                ),\n                loading: false\n            }\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: {...state.post, comments: payload},\n                loading: false\n            }\n        case REMOVE_COMMENT:\n            return {\n                ...state,\n                post: {\n                    ...state.post,\n                    comments: state.post.comments.filter(\n                        comment => comment._id !== payload\n                    )\n                },\n                loading: false\n            }\n        default:\n            return state;\n    }\n};\n\nexport default post;"]},"metadata":{},"sourceType":"module"}