{"ast":null,"code":"import { ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, UPDATE_LIKES } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...post,\n        post: { ...state.post,\n          payload\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/aht/Desktop/MERN/client/src/reducers/post.js"],"names":["ADD_COMMENT","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","UPDATE_LIKES","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes"],"mappings":"AAAA,SACIA,WADJ,EAEIC,QAFJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,SALJ,EAMIC,UANJ,EAOIC,YAPJ,QAQO,kBARP;AAUA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;AAOA,gBAAe,CAACC,KAAK,GAACL,YAAP,EAAqBM,MAArB,KAAgC;AAC3C,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBF,MAAxB;;AAEA,UAAQC,IAAR;AACI,SAAKV,SAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHJ,QAAAA,KAAK,EAAEO,OAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKP,QAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHH,QAAAA,IAAI,EAAEM,OAFH;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKT,QAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAFJ;AAGHE,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKR,WAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKL,UAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHD,QAAAA,KAAK,EAAEI,OAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKJ,YAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgBT,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACI,EAArB,GAA0B,EACrD,GAAGV,IADkD;AAErDW,UAAAA,KAAK,EAAEL,OAAO,CAACK;AAFsC,SAA1B,GAEFX,IAFtB,CAFJ;AAMHC,QAAAA,OAAO,EAAE;AANN,OAAP;;AAQJ,SAAKV,WAAL;AACI,aAAO,EACH,GAAGS,IADA;AAEHA,QAAAA,IAAI,EAAE,EAAC,GAAGG,KAAK,CAACH,IAAV;AAAgBM,UAAAA;AAAhB,SAFH;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ;AACI,aAAOE,KAAP;AA/CR;AAiDH,CApDD","sourcesContent":["import {\n    ADD_COMMENT,\n    ADD_POST,\n    DELETE_POST,\n    GET_POST,\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES\n} from '../actions/types';\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n};\n\nexport default (state=initialState, action) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false\n            };\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false  \n            }\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [payload, ...state.posts],\n                loading: false\n            }\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n        case POST_ERROR:\n            return {\n                ...state,\n                error: payload,\n                loading: false\n            }\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload.id ? {\n                    ...post,\n                    likes: payload.likes } : post\n                ),\n                loading: false\n            }\n        case ADD_COMMENT:\n            return {\n                ...post,\n                post: {...state.post, payload},\n                loading: false\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}