{"ast":null,"code":"import React,{useEffect}from'react';import{connect}from'react-redux';import Spinner from'../layout/Spinner';import{getGithubRepos}from'../../actions/profile';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ProfileGithub=function ProfileGithub(_ref){var username=_ref.username,getGithubRepos=_ref.getGithubRepos,repos=_ref.repos;useEffect(function(){getGithubRepos(username);},[getGithubRepos,username]);return/*#__PURE__*/_jsxs(\"div\",{className:\"profile-github\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-primary my-1\",children:\"Github Repos\"}),repos===null?/*#__PURE__*/_jsx(Spinner,{}):repos.map(function(repo){return/*#__PURE__*/_jsxs(\"div\",{className:\"repo bg-white p-1 my-1\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:/*#__PURE__*/_jsx(\"a\",{href:repo.html_url,target:\"_blank\",rel:\"noopener noreferre\",children:repo.name})}),/*#__PURE__*/_jsx(\"p\",{children:repo.description})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-primary\",children:[\"Stars: \",repo.stargazers_count]}),/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-dark\",children:[\"Watchers: \",repo.watchers_count]}),/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-light\",children:[\"Forks: \",repo.forks_count]})]})})]},repo._id);})]});};var mapStateToProps=function mapStateToProps(state){return{repos:state.profile.repos};};export default connect(mapStateToProps,{getGithubRepos:getGithubRepos})(ProfileGithub);","map":{"version":3,"sources":["/home/aht/Desktop/MERN/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","connect","Spinner","getGithubRepos","ProfileGithub","username","repos","map","repo","html_url","name","description","stargazers_count","watchers_count","forks_count","_id","mapStateToProps","state","profile"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CAEA,OAAQC,OAAR,KAAsB,aAAtB,CAEA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,OAASC,cAAT,KAA+B,uBAA/B,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAuC,IAArCC,CAAAA,QAAqC,MAArCA,QAAqC,CAA3BF,cAA2B,MAA3BA,cAA2B,CAAXG,KAAW,MAAXA,KAAW,CACzDN,SAAS,CAAC,UAAM,CACZG,cAAc,CAACE,QAAD,CAAd,CACH,CAFQ,CAEP,CAAEF,cAAF,CAAkBE,QAAlB,CAFO,CAAT,CAIA,mBACI,aAAK,SAAS,CAAC,gBAAf,wBACI,WAAI,SAAS,CAAC,mBAAd,0BADJ,CAEKC,KAAK,GAAK,IAAV,cAAiB,KAAC,OAAD,IAAjB,CACGA,KAAK,CAACC,GAAN,CAAU,SAAAC,IAAI,qBACV,aAAoB,SAAS,CAAC,wBAA9B,wBACI,oCACI,iCACI,UACI,IAAI,CAAEA,IAAI,CAACC,QADf,CAEI,MAAM,CAAC,QAFX,CAGI,GAAG,CAAC,oBAHR,UAKKD,IAAI,CAACE,IALV,EADJ,EADJ,cAUI,mBAAIF,IAAI,CAACG,WAAT,EAVJ,GADJ,cAaI,kCACI,mCACI,YAAI,SAAS,CAAC,qBAAd,qBACYH,IAAI,CAACI,gBADjB,GADJ,cAII,YAAI,SAAS,CAAC,kBAAd,wBACeJ,IAAI,CAACK,cADpB,GAJJ,cAOI,YAAI,SAAS,CAAC,mBAAd,qBACYL,IAAI,CAACM,WADjB,GAPJ,GADJ,EAbJ,GAAUN,IAAI,CAACO,GAAf,CADU,EAAd,CAHR,GADJ,CAoCH,CAzCD,CAiDA,GAAMC,CAAAA,eAAe,CAAE,QAAjBA,CAAAA,eAAiB,CAAAC,KAAK,QAAK,CAC7BX,KAAK,CAAEW,KAAK,CAACC,OAAN,CAAcZ,KADQ,CAAL,EAA5B,CAIA,cAAeL,CAAAA,OAAO,CAACe,eAAD,CAAkB,CAACb,cAAc,CAAdA,cAAD,CAAlB,CAAP,CAA2CC,aAA3C,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport Spinner from '../layout/Spinner';\nimport { getGithubRepos } from '../../actions/profile';\n\nconst ProfileGithub = ({username, getGithubRepos, repos}) => {\n    useEffect(() => {\n        getGithubRepos(username)\n    },[ getGithubRepos, username]);\n\n    return (\n        <div className=\"profile-github\">\n            <h2 className=\"text-primary my-1\">Github Repos</h2>\n            {repos === null ? <Spinner /> : (\n                repos.map(repo => (\n                    <div key={repo._id} className=\"repo bg-white p-1 my-1\">\n                        <div>\n                            <h4>\n                                <a \n                                    href={repo.html_url} \n                                    target='_blank'\n                                    rel='noopener noreferre'\n                                >\n                                    {repo.name}\n                                </a>\n                            </h4>\n                            <p>{repo.description}</p>\n                        </div>\n                        <div>\n                            <ul>\n                                <li className=\"badge badge-primary\">\n                                    Stars: {repo.stargazers_count}\n                                </li>\n                                <li className=\"badge badge-dark\">\n                                    Watchers: {repo.watchers_count}\n                                </li>\n                                <li className=\"badge badge-light\">\n                                    Forks: {repo.forks_count}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                ))\n            )}\n        </div>\n    )\n}\n\nProfileGithub.propTypes = {\n    getGithubRepos: PropTypes.func.isRequired,\n    username: PropTypes.string.isRequired,\n    repos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps =state => ({\n    repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {getGithubRepos})(ProfileGithub)\n"]},"metadata":{},"sourceType":"module"}